package {{.Package}}

import (
	"errors"
	"fmt"
	"strings"
)

type (
	{{.EnumName}} {{.EnumType}}
)

const (
	_enumName = "{{.EnumName}}"

	{{range .Values}}{{.Key}} {{$.EnumName}} = {{.Value}}
	{{end}}
	_unknown {{.EnumName}} = {{if .IsTypeString}}""{{else}}0{{end}}
)

var (
	{{.ErrorInvalid}} = errors.New("invalid value for {{.EnumName}}, must be one of {{.AllValues}}")
)

func Values() []{{.EnumName}} {
	return []{{.EnumName}}{
	{{range .Values}}	{{.Key}},
	{{end}}	}
}

func StringValues() []string {
	return []string{
	{{range .Values}}	"{{.Key}}",
	{{end}}	}
}

func FromValue({{.EnumNameLetter}} {{.EnumType}}) ({{.EnumName}}, error) {
	switch {{.EnumNameLetter}} {
	{{range .Values}}case {{.Value}}:
		return {{.Key}}, nil
	{{end}}default:
		return _unknown, {{.ErrorInvalid}}
	}
}

func FromName({{.EnumNameLetter}} string) ({{.EnumName}}, error) {
	switch strings.ToUpper({{.EnumNameLetter}}) {
	{{range .Values}}case "{{.Key}}":
		return {{.Key}}, nil
	{{end}}default:
		return _unknown, {{.ErrorInvalid}}
	}
}

func ({{.EnumNameLetter}} {{.EnumName}}) String() string {
{{if .IsTypeString}}	return string({{.EnumNameLetter}})
{{else}}	switch {{.EnumNameLetter}} {
	{{range .Values}}case {{.Key}}:
		return "{{.Key}}"
	{{end}}default:
		return fmt.Sprintf("{{.EnumName}}(%d)", int({{.EnumNameLetter}}))
	}
{{end}}}

func ({{.EnumNameLetter}} {{.EnumName}}) Int() int {
{{if .IsTypeInt}}	return int({{.EnumNameLetter}})
{{else}}	switch {{.EnumNameLetter}} {
	{{range $index, $element := .Values}}case {{$element.Key}}:
		return {{$index}}
	{{end}}default:
		return -1
	}
{{end}}}

func ({{.EnumNameLetter}} {{.EnumName}}) Code() string {
	return _enumName + "." + {{.EnumNameLetter}}.String()
}

func ({{.EnumNameLetter}} {{.EnumName}}) Repr() string {
{{if .IsTypeString}}	return fmt.Sprintf("%s(%q)", _enumName, string({{.EnumNameLetter}}))
{{else}}	return fmt.Sprintf("%s(%d)", _enumName, int({{.EnumNameLetter}}))
{{end}}}
